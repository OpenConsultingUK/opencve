version: '2'

services:
  airflow-webserver:
    build:
      context: ../scheduler
      dockerfile: Dockerfile
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8081:8080"  # Changed port mapping
    depends_on:
      - airflow-init
    volumes:
      - ../scheduler/dags/:/opt/airflow/dags
      - ../scheduler/airflow.cfg:/opt/airflow/airflow.cfg:ro
      - repositories:/home/airflow/repositories/
    env_file:
      - .env
    networks:
      - my_isolated_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s

  airflow-scheduler:
    build:
      context: ../scheduler
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      - airflow-init
    volumes:
      - ../scheduler/dags/:/opt/airflow/dags
      - ../scheduler/airflow.cfg:/opt/airflow/airflow.cfg:ro
      - repositories:/home/airflow/repositories/
    env_file:
      - .env
    networks:
      - my_isolated_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s

  airflow-worker:
    build:
      context: ../scheduler
      dockerfile: Dockerfile
    container_name: airflow-worker
    command: celery worker
    depends_on:
      - airflow-init
    volumes:
      - ../scheduler/dags/:/opt/airflow/dags
      - ../scheduler/airflow.cfg:/opt/airflow/airflow.cfg:ro
      - repositories:/home/airflow/repositories/
    env_file:
      - .env
    networks:
      - my_isolated_network
    restart: on-failure
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      DUMB_INIT_SETSID: "0"

  airflow-init:
    build:
      context: ../scheduler
      dockerfile: Dockerfile
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - exec /entrypoint airflow version
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ../scheduler/dags/:/opt/airflow/dags
      - ../scheduler/airflow.cfg:/opt/airflow/airflow.cfg:ro
      - repositories:/home/airflow/repositories/
    env_file:
      - .env
    networks:
      - my_isolated_network

  webserver:
    build:
      context: ../web/
      dockerfile: Dockerfile
      args:
        - OPENCVE_REPOSITORY=${OPENCVE_REPOSITORY}
        - OPENCVE_VERSION=${OPENCVE_VERSION}
        - GUNICORN_CMD_ARGS=${GUNICORN_CMD_ARGS}
    container_name: webserver
    env_file:
      - .env
    volumes:
      - ../web/opencve/conf/.env:/app/opencve/web/opencve/conf/.env:ro
      - ../web/opencve/conf/settings.py:/app/opencve/web/opencve/conf/settings.py:ro
      - repositories:/app/repositories/:ro
      - staticfiles:/app/static/
    ports:
      - "8080:80"  # Changed port mapping
    networks:
      - my_isolated_network
    restart: on-failure

  nginx:
    image: nginx:bookworm
    container_name: nginx
    ports:
      - "${OPENCVE_PORT:-80}:80"
    volumes:
      - ./conf/opencve.conf.template:/etc/nginx/templates/opencve.conf.template:ro
      - ./conf/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - staticfiles:/var/www/opencve/static/:ro
    networks:
      - my_isolated_network
    restart: on-failure

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - my_isolated_network
    restart: on-failure
    healthcheck:
       test: ["CMD", "redis-cli", "ping"]
       interval: 10s
       retries: 5
       start_period: 5s

  postgres:
    image: postgres:${POSTGRES_VERSION:-15}
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-opencve}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-opencve}
      POSTGRES_DB: opencve
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - postgres-db:/var/lib/postgresql/data
    networks:
      - my_isolated_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      retries: 5
      start_period: 5s

volumes:
  postgres-db:
  staticfiles:
  repositories:

networks:
  my_isolated_network:
    driver: bridge
    internal: true